syntax = "proto3";
package akash.deployment.v1beta1;

import "gogoproto/gogo.proto";
import "akash/deployment/v1beta1/group.proto";

option go_package = "github.com/ovrclk/akash/x/deployment/types";

// Msg defines the deployment Msg service.
service Msg {
  // CreateDeployment defines a method to create new deployment given proper inputs.
  rpc CreateDeployment(MsgCreateDeployment) returns (MsgCreateDeploymentResponse);

  // UpdateDeployment defines a method to update a deployment given proper inputs.
  rpc UpdateDeployment(MsgUpdateDeployment) returns (MsgUpdateDeploymentResponse);

  // CloseDeployment defines a method to close a deployment given proper inputs.
  rpc CloseDeployment(MsgCloseDeployment) returns (MsgCloseDeploymentResponse);

  // CloseGroup defines a method to close a group of a deployment given proper inputs.
  rpc CloseGroup(MsgCloseGroup) returns (MsgCloseGroupResponse);
}

// MsgCreateDeployment defines an SDK message for creating deployment
message MsgCreateDeployment {
  option (gogoproto.equal) = false;

  DeploymentID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];
  repeated GroupSpec groups = 2
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "groups", (gogoproto.moretags) = "yaml:\"groups\""];
  bytes version = 3 [(gogoproto.jsontag) = "version", (gogoproto.moretags) = "yaml:\"version\""];
}

// MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type.
message MsgCreateDeploymentResponse {}

// MsgUpdateDeployment defines an SDK message for updating deployment
message MsgUpdateDeployment {
  option (gogoproto.equal) = false;

  DeploymentID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];
  repeated GroupSpec groups = 2
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "groups", (gogoproto.moretags) = "yaml:\"groups\""];
  bytes version = 3 [(gogoproto.jsontag) = "version", (gogoproto.moretags) = "yaml:\"version\""];
}

// MsgUpdateDeploymentResponse defines the Msg/UpdateDeployment response type.
message MsgUpdateDeploymentResponse {}

// MsgCloseDeployment defines an SDK message for closing deployment
message MsgCloseDeployment {
  option (gogoproto.equal) = false;

  DeploymentID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];
}

// MsgCloseDeploymentResponse defines the Msg/CloseDeployment response type.
message MsgCloseDeploymentResponse {}

// DeploymentID stores owner and sequence number
message DeploymentID {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;

  string owner = 1 [(gogoproto.jsontag) = "owner", (gogoproto.moretags) = "yaml:\"owner\""];
  uint64 dseq  = 2
      [(gogoproto.customname) = "DSeq", (gogoproto.jsontag) = "dseq", (gogoproto.moretags) = "yaml:\"dseq\""];
}

// Deployment stores deploymentID, state and version details
message Deployment {
  option (gogoproto.equal) = false;

  DeploymentID deployment_id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "DeploymentID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];

  // State is an enum which refers to state of deployment
  enum State {
    option (gogoproto.goproto_enum_prefix) = false;

    // Prefix should start with 0 in enum. So declaring dummy state
    invalid = 0 [(gogoproto.enumvalue_customname) = "DeploymentStateInvalid"];
    // DeploymentActive denotes state for deployment active
    active = 1 [(gogoproto.enumvalue_customname) = "DeploymentActive"];
    // DeploymentClosed denotes state for deployment closed
    closed = 2 [(gogoproto.enumvalue_customname) = "DeploymentClosed"];
  }

  State state   = 2 [(gogoproto.jsontag) = "state", (gogoproto.moretags) = "yaml:\"state\""];
  bytes version = 3 [(gogoproto.jsontag) = "version", (gogoproto.moretags) = "yaml:\"version\""];
}

// DeploymentResponse represents details of deployment along with group details
message DeploymentResponse {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;

  Deployment deployment = 1
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "deployment", (gogoproto.moretags) = "yaml:\"deployment\""];
  repeated Group groups = 2
      [(gogoproto.nullable) = false, (gogoproto.jsontag) = "groups", (gogoproto.moretags) = "yaml:\"groups\""];
  bytes version = 3 [(gogoproto.jsontag) = "version", (gogoproto.moretags) = "yaml:\"version\""];
}

// DeploymentFilters defines filters used to filter deployments
message DeploymentFilters {
  option (gogoproto.equal) = false;

  string owner = 1 [(gogoproto.jsontag) = "owner", (gogoproto.moretags) = "yaml:\"owner\""];
  uint64 dseq  = 2
      [(gogoproto.customname) = "DSeq", (gogoproto.jsontag) = "dseq", (gogoproto.moretags) = "yaml:\"dseq\""];
  string state = 3 [(gogoproto.jsontag) = "state", (gogoproto.moretags) = "yaml:\"state\""];
}

// Params defines the parameters for the deployment module.
message Params {
  option (gogoproto.equal) = true;

  uint64 max_unit_cpu = 1 [
    (gogoproto.customname) = "MaxUnitCPU",
    (gogoproto.jsontag)    = "max_unit_cpu",
    (gogoproto.moretags)   = "yaml:\"max_unit_cpu\""
  ];
  uint64 max_unit_memory = 2 [
    (gogoproto.customname) = "MaxUnitMemory",
    (gogoproto.jsontag)    = "max_unit_memory",
    (gogoproto.moretags)   = "yaml:\"max_unit_memory\""
  ];
  uint64 max_unit_storage = 3 [
    (gogoproto.customname) = "MaxUnitStorage",
    (gogoproto.jsontag)    = "max_unit_storage",
    (gogoproto.moretags)   = "yaml:\"max_unit_storage\""
  ];
  uint64 max_unit_count = 4 [
    (gogoproto.customname) = "MaxUnitCount",
    (gogoproto.jsontag)    = "max_unit_count",
    (gogoproto.moretags)   = "yaml:\"max_unit_count\""
  ];
  uint64 max_unit_price = 5 [
    (gogoproto.customname) = "MaxUnitPrice",
    (gogoproto.jsontag)    = "max_unit_price",
    (gogoproto.moretags)   = "yaml:\"max_unit_price\""
  ];

  uint64 min_unit_cpu = 6 [
    (gogoproto.customname) = "MinUnitCPU",
    (gogoproto.jsontag)    = "min_unit_cpu",
    (gogoproto.moretags)   = "yaml:\"min_unit_cpu\""
  ];
  uint64 min_unit_memory = 7 [
    (gogoproto.customname) = "MinUnitMemory",
    (gogoproto.jsontag)    = "min_unit_memory",
    (gogoproto.moretags)   = "yaml:\"min_unit_memory\""
  ];
  uint64 min_unit_storage = 8 [
    (gogoproto.customname) = "MinUnitStorage",
    (gogoproto.jsontag)    = "min_unit_storage",
    (gogoproto.moretags)   = "yaml:\"min_unit_storage\""
  ];
  uint64 min_unit_count = 9 [
    (gogoproto.customname) = "MinUnitCount",
    (gogoproto.jsontag)    = "min_unit_count",
    (gogoproto.moretags)   = "yaml:\"min_unit_count\""
  ];
  uint64 min_unit_price = 10 [
    (gogoproto.customname) = "MinUnitPrice",
    (gogoproto.jsontag)    = "min_unit_price",
    (gogoproto.moretags)   = "yaml:\"min_unit_price\""
  ];

  int64 max_group_count = 11 [
    (gogoproto.customname) = "MaxGroupCount",
    (gogoproto.jsontag)    = "max_group_count",
    (gogoproto.moretags)   = "yaml:\"max_group_count\""
  ];
  int64 max_group_units = 12 [
    (gogoproto.customname) = "MaxGroupUnits",
    (gogoproto.jsontag)    = "max_group_units",
    (gogoproto.moretags)   = "yaml:\"max_group_units\""
  ];

  int64 max_group_cpu = 13 [
    (gogoproto.customname) = "MaxGroupCPU",
    (gogoproto.jsontag)    = "max_group_cpu",
    (gogoproto.moretags)   = "yaml:\"max_group_cpu\""
  ];
  int64 max_group_memory = 14 [
    (gogoproto.customname) = "MaxGroupMemory",
    (gogoproto.jsontag)    = "max_group_memory",
    (gogoproto.moretags)   = "yaml:\"max_group_memory\""
  ];
  int64 max_group_storage = 15 [
    (gogoproto.customname) = "MaxGroupStorage",
    (gogoproto.jsontag)    = "max_group_storage",
    (gogoproto.moretags)   = "yaml:\"max_group_storage\""
  ];

  int64 min_group_memprice = 16 [
    (gogoproto.customname) = "MinGroupMemPrice",
    (gogoproto.jsontag)    = "min_group_memprice",
    (gogoproto.moretags)   = "yaml:\"min_group_memprice\""
  ];
  int64 max_group_memprice = 17 [
    (gogoproto.customname) = "MaxGroupMemPrice",
    (gogoproto.jsontag)    = "max_group_memprice",
    (gogoproto.moretags)   = "yaml:\"max_group_memprice\""
  ];
}
